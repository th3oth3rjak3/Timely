<MudForm @ref="Form" Model="@NewItemForm" Validation="validator.ValidateModel">
    <MudDialog ContentStyle="min-width: 400px;">
        <DialogContent>
            <MudTextField @bind-Value="NewItemForm.Description" Label="Description" For="@(() => NewItemForm.Description)" />
        </DialogContent>
        <DialogActions>
            <MudStack Row="true" Spacing="4">
                <MudButton ButtonType="ButtonType.Button" OnClick="() => MudDialog.Cancel()">Cancel</MudButton>
                <MudButton ButtonType="ButtonType.Button" Color="Color.Primary" Variant="Variant.Filled" OnClick="AddNewTodoItem">Add</MudButton>
            </MudStack>
        </DialogActions>
    </MudDialog>
</MudForm>

@code {

    /// <summary>
    /// The mud dialog instance used to cancel and submit the form.
    /// </summary>
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; } = default!;

    /// <summary>
    /// The form to contain the new todo item after successful input.
    /// </summary>
    private NewTodoItem NewItemForm { get; set; } = new();

    /// <summary>
    /// The form reference to use validation.
    /// </summary>
    private MudForm Form { get; set; } = default!;

    /// <summary>
    /// Validate the todo item fields and submit the new item if valid.
    /// </summary>
    /// <returns></returns>
    private async Task AddNewTodoItem()
    {
        await Form.Validate();

        if (!Form.IsValid) return;

        if (NewItemForm.Description is null) return;

        var newItem = new TodoItem(NewItemForm.Description);
        MudDialog.Close(DialogResult.Ok(newItem));
    }

    /// <summary>
    /// The validator for this form.
    /// </summary>
    private NewTodoItemValidator validator = new NewTodoItemValidator();
}
